Object subclass: #Alumno	instanceVariableNames: 'nombre apellido dni promedio materias'	classVariableNames: ''	poolDictionaries: ''	category: 'Academia-Smalltalk'!!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 07:18'!agregarMateria: _materia notas: _notas		| nMat |	nMat := Materia new.	nMat limpiar.	nMat setNombre: _materia.	nMat cargarNotas: _notas.		materias add: nMat.		^nMat.! !!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:22'!calcularPromedio	"calcula el promedio"	| promed |	promed := 0.		materias do: [:it|		promed := promed +it getPromedio.		].	promed := promed / (materias size).	promedio := promed.	^promedio.! !!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 04:02'!getMaterias	"comment stating purpose of message"	^materias.! !!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:31'!getPromedio	^promedio.! !!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:23'!identificar	"devuelve el nombre apellido y dni del alumno compuestos en una cadena"	|cadena procad|	procad := (promedio asFloat roundTo: 0.01 printString).		cadena := (nombre) , ' ' , apellido , ' DNI: ' , (dni printString), ' PROMEDIO: ', procad, String cr.	^cadena.	! !!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:21'!initialize	"comment stating purpose of message"	super initialize.	nombre:= 'Joseph'.	apellido:= 'Joestar'.	dni:=41049279.	promedio := 0.	materias := OrderedCollection new.		#('Biologia' 'Matematica' 'Arquitectura' 'Literatura' 'Carpinteria') do: [:it | materias add: ((Materia new)setNombre: it) ] .		self calcularPromedio.	^self! !!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:44'!limpiar	"Quita todas las materias de la lista de materias, para empezar con nuevos datos"	materias removeAll.	^nil.! !!Alumno methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:57'!setNombre: _nombre apellido: _apellido dni: _dni	"establece nombre, apellido, dni y borra las listas, no es ideal pero sirve"	self limpiar.	nombre := _nombre.	apellido := _apellido.	dni := _dni.	^nil.! !Object subclass: #Institucion	instanceVariableNames: 'nombre alumnos'	classVariableNames: ''	poolDictionaries: ''	category: 'Academia-Smalltalk'!!Institucion methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 07:05'!agregarAlumno: _alumno	"agrega un alumno"			alumnos add:_alumno.			^_alumno! !!Institucion methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:32'!initialize	"INICIALIZADORRRR"	super initialize.	nombre := 'IEAE3'.	alumnos:= SortedCollection new.	alumnos sortBlock: [:c1 :c2 | c1 getPromedio > c2 getPromedio].		(1 to: 5) do: [:it | alumnos add: (Alumno new)].		^self! !!Institucion methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:51'!limpiar	"borra todos los alumnos"	alumnos removeAll.	^nil.! !!Institucion methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 07:02'!nuevoAlumno: _nombre apellido: _apellido dni: _dni	"crea un nuevo alumno"	| _alumno |		_alumno := Alumno new.	_alumno setNombre: _nombre apellido: _apellido dni: _dni.			^_alumno! !!Institucion methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 05:39'!printAlumnos		alumnos do:[:it | 		Transcript show: ('> ', it identificar).		it getMaterias do: [:ar | 			Transcript show: ('. . . ', ar mostrarContenido).			]		].	^ nil! !Object subclass: #Materia	instanceVariableNames: 'promedio nombre notas'	classVariableNames: ''	poolDictionaries: ''	category: 'Academia-Smalltalk'!!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:17'!calcularPromedio	"calcula el promedio"	| promed |	promed := 0.	1 to: (notas size) do: [:it | promed:= promed +(notas at: it)].	promedio := (promed /(notas size)).	^promedio.! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 03:43'!cargar3NotasRandom	"carga 3 notas generadas aleatoriamente, devuelve el promedio"	| n1 n2 n3 |		n1 := (1 to: 10) atRandom.	n2:= (1 to: 10) atRandom.	n3:= (1 to: 10) atRandom.	notas removeAll.	notas  at: 1 put: n1.	notas  at: 2 put: n2.	notas  at: 3 put: n3.	promedio := ((n1+n2+n3)/3).		^promedio.		! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:54'!cargarNotas: _notas	"carga 3 notas generadas aleatoriamente, devuelve el promedio"	_notas do: [:it | notas add: it].	self calcularPromedio.	^promedio.		! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 04:06'!getNombre	^nombre.! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:20'!getPromedio	^promedio.! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 05:41'!initialize		| n1 n2 n3 |		nombre := 'Datos Dateros'.	promedio := 0.		notas := OrderedCollection new.	n1 := (1 to: 10) atRandom.	n2:= (1 to: 10) atRandom.	n3:= (1 to: 10) atRandom.	notas removeAll.	notas add: n1.	notas add: n2.	notas add: n3.		promedio := self calcularPromedio.		^self.! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:42'!limpiar	"deja sin variables la instancia, para cargar valores propios"	notas removeAll.		^nil.! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 06:18'!mostrarContenido	"Muestra el nombre de la materia, junto a las notas y el promedio"	|resp calf promd|		calf := String new.	notas do: [:it3 |		calf := calf, ' ', (it3 printString).		].	promd := promedio asFloat roundTo: 0.01.	resp := (nombre, ' Promedio: ' , (promd printString) , ' Notas: ', calf, String cr).		^resp.! !!Materia methodsFor: 'as yet unclassified' stamp: 'MET 11/15/2019 03:59'!setNombre: _nombre	"comment stating purpose of message"	nombre := _nombre.		^self.! !